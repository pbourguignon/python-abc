{"name":"Python-abc","tagline":"A generic implementation of Approximate Bayesian Computation methods","body":"python-abc\r\n==========\r\n\r\nA generic implementation of Approximate Bayesian Computation methods, including\r\na parallel version based on the multiprocessing module.\r\n\r\n\r\nBasic usage\r\n-----------\r\n\r\nThe sampler comes in two flavor: a non-parallel version (in module ABC.py) and\r\na parallel version (in module ABCmp.py). Both interfaces are mostly identical.\r\n\r\nThe main class is ABC.ABCSampler (ABCmp.ABCmp respectively). Its constructor takes references to functions:\r\n\r\n* *f_prior*\r\n    generates samples from the prior distribution\r\n\r\n* *f_model*\r\n    takes an output from f_prior, and returns a sample from the model\r\n\r\n* *f_summarize*\r\n    takes an output from f_model, and returns summary statistics\r\n\r\nIf these functions are available from a single module *user_module*, then a\r\nsimple code like would do the job:\r\n\r\n    import user_module\r\n    import ABC\r\n\r\n    # Load your data\r\n    data = ...\r\n\r\n    abc = ABC.ABCSampler( data, \r\n                          user_module.f_prior, \r\n                          user_module.f_model,\r\n                          user_module.f_summarize)\r\n    \r\n    res = abc.sample(nsamples, acc_ratio)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}